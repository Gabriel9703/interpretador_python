ENTENDIMENTO DA PIPELINE DO CPYTHON:


Uma simples simulação de operação soma entre dois valores dentro de um print

As ideias essenciais para entender o trabalho do CPython:

- Python é uma linguagem que por padrão vem com CPython imbutido, que é 
um interpretador/compilador escrito em C que faz o trabalho embaixo dos panos
para pegar um código fonte e transformar em código máquina, para isso ele segue 
os passos abaixo:
 - Separa os textos escritos no alto nivel em tokens, conhecido como análise lexica. Para essa
 tokenização o CPython usa expressão regulares para encontrar os padrões e separar em classes
 - Após tokenização, é feito uma análise sintática, assim sendo, é feito uma conferencia na gramatica
 da linguagem para checar se as expressões podem montar uma AST válida.
 - Com os tokens confirmados pelo parse, é montado uma Arvore Sintática Abstrata(AST) , um conceito
 importante usado para montar os nós da arvore é recursão. A estrutura de dados usada é a arvore binária ou n-Ária
 - Concluido a montagem da arvóre, o CPython compila essa estrutura em bytecode, ou seja, instruções que a máquina 
 virtual do Python pode ler e interpretar.
 - Todo esse processo de compilação gera um arquivo .pyc que fica dentro pasta __pycache__, isso é uma forma de
 otimizar o código, para que se for rodado na segunda vez, ele não precise ser recompilado


- CONCEITOS DA PVM

- Agora, após a criação do bytecode, ocorre o processo de interpretação das instruções pela PVM
a máquina virtual do python, usa o conceito de pilha para fazer a interpretação dos bytecode, por isso é 
conhecida como stack machine,
- A ideia central da PVM é ter um grande LOOP com vários switch/case que verifica os opcode(instruções de código) gerado pelo bytecode
e vai empilhando/desimpilhando até o fim da operação.
- A VM passa essas instruções interpretadas para máquina real, que faz as operações e devolve o resultado.
- Os bytecodes só são entendidos pela PVM e ela interpreta eles em código máquina para CPU realizar as operações

Obs: 
Apartir da versões 3.11 o interpretador python foi otimizado para fazer operações
mais rápidas dentro da VM, ou seja ele recompila o bytecode em instruções mais rápidas.
Esse processo ainda estou estudando na documentação oficial(https://docs.python.org/pt-br/3.12/whatsnew/3.11.html#faster-startup)
Mas a ideia é ter um interpretador Adaptativo Especializado, processo que que é tratado na PEP 659





